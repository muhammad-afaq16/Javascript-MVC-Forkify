
Use Commands of Git 2k24:

----------------------------------------------------------------

- git config user.name

- git config user.email

- git commit -m ""

- git add .

- git diff

- git checkout -b branch_name

- git checkout branch_name 

- git branch branch_name

- git branch

- git -M main

- git push origin master

- git remote -v

- git pull origin branch_name

- git fetch (Just get meta data not transfer files)

- git status

- git log --oneline

- git status

- git log --oneline

- git restore --staged Root_Path or filename


----------------------------------------------------------------

Q: How to go to the previous commit / discard new changes?

- git reset --hard HEAD

--------------------------------------------------------------

Q: Let's say you have now already committed ?

RUN and Copy ID: 
- git log

- git reset --hard commitID

This approach is bit risky, creating a new branch and add new features there.

----------------------------------------------------------------

Q: How to merge the new feature?

Checkout to main branch and RUN Command

- git merge new_feature

----------------------------------------------------------------

## REBASE (Re-Write Your commit history)

- you can change commit message
- you can delete commit message
- you can record the commit message
- you can combine the commit message
- crazy stuff


Q: How to change the most recent commit message?

- git amend ....... only change recent commit

Q: How to change the commit message other than most recent?

Below is example commit 3 will be modified.
- git rebase -i HEAD~3

------------------------------------------------------------------

Q: How stashing work?

Basically stashing is come to handy, when you have changes in 
B branch and you suddenly Remember you are at the wrong branch.
YOU NEED your CURRENT changes in A branch instead of B.

> - git stash show


It will keep changes in stash and Apply to working directory
> - git stash Apply

Will pop from stash and Apply to working directory
> - git stash Pop

--------------------------------------------------------------------------------

## Cherry Pick Command

Q: What will you do, if you committed on wrong branch?

- git log --oneline

- Copy the hash id of commit from for example main branch and then do below.

- git checkout feature/newsletter

- git cherry-pick commitID


Note: you also need to delete from the main, by running
> git reset --hard HEAD~1

-----------------------------------------------------------------------------------
### Reflog

If we deleted a useful commit then Reflog is saviour.

- git reflog 

Opens up the new editor copy the hash of deleted commit

- git checkout -b new_branch commitID

There we go, Now we have got the deleted commit back. ðŸ˜Š

-----------------------------------------------------------------------------------
